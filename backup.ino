#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecureBearSSL.h>
#include <ArduinoJson.h>
#include <Arduino.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SoftwareSerial.h>
#include <DFPlayerMini_Fast.h>

// üîó Th√¥ng tin WiFi & API
const char* ssid = "Le Tan";
const char* password = "12345678";
String api_token = "FOE8NU31EPPH0KIGPSBV92XOJ0GJY46OHRI9K2VNKUTMZALAJ1ERDRF4ZTMFVDFX";
String accountNumber = "LOCSPAY000308452";

// üõ† C·∫•u h√¨nh ph·∫ßn c·ª©ng
#define DFPLAYER_RX 12  // D6 Ch√¢n RX c·ªßa DFPlayer
#define DFPLAYER_TX 14  // D5 Ch√¢n TX c·ªßa DFPlayer
#define LCD_SDA 4      // D2 Ch√¢n SDA c·ªßa LCD
#define LCD_SCL 5      // D1 Ch√¢n SCL c·ªßa LCD
#define VOLUME 30      // √Çm l∆∞·ª£ng c·ªßa DFPlayer (0-30)

// ƒê·ªãnh nghƒ©a th·ªùi gian delay chi ti·∫øt cho t·ª´ng th√†nh ph·∫ßn
#define DELAY_AFTER_GREETING 1000    // Delay sau c√¢u ch√†o ƒë·∫ßu ti√™n
#define DELAY_AFTER_NUMBER 400       // Delay sau khi ƒë·ªçc s·ªë (1, 2, 3...)
#define DELAY_AFTER_MILLION 400      // Delay sau khi ƒë·ªçc "tri·ªáu"
#define DELAY_AFTER_HUNDRED 400      // Delay sau khi ƒë·ªçc "trƒÉm"
#define DELAY_AFTER_THOUSAND 400     // Delay sau khi ƒë·ªçc "ngh√¨n"
#define DELAY_AFTER_TEN 400          // Delay sau khi ƒë·ªçc "m∆∞∆°i"
#define DELAY_AFTER_UNIT 400         // Delay sau khi ƒë·ªçc ƒë∆°n v·ªã cu·ªëi (tri·ªáu, ngh√¨n...)
#define DELAY_BEFORE_CURRENCY 400    // Delay tr∆∞·ªõc khi ƒë·ªçc "ƒë·ªìng"
#define DELAY_AFTER_CURRENCY 400     // Delay sau khi ƒë·ªçc "ƒë·ªìng"
#define DELAY_BETWEEN_GROUPS 400     // Delay gi·ªØa c√°c nh√≥m s·ªë (tri·ªáu, ngh√¨n...)

// ‚ö° Bi·∫øn to√†n c·ª•c
SoftwareSerial dfPlayerSerial(DFPLAYER_RX, DFPLAYER_TX);
DFPlayerMini_Fast dfPlayer;
LiquidCrystal_I2C lcd(0x27, 16, 2);

unsigned long timeGetData = 0;
String transactionDate = "";
long amountIn = 0;
bool isSpeaking = false;

// üìå Th√¥ng tin t√†i kho·∫£n
String accountName = "PHAM QUANG VINH";
String bankName = "ACB";

// üéµ Audio file mapping
#define AUDIO_GREETING 1        // Ch√†o m·ª´ng
#define AUDIO_DONG 2            // ƒê·ªìng
#define AUDIO_NUMBER_OFFSET 3   // Numbers 1-9 are files 4-12
#define AUDIO_MUOI 13           // M∆∞·ªùi
#define AUDIO_MUOI_OFFSET 21    // "Hai m∆∞∆°i" to "Ch√≠n m∆∞∆°i" are files 21-29
#define AUDIO_TRAM 31           // TrƒÉm
#define AUDIO_NGHIN 32          // Ngh√¨n
#define AUDIO_TRIEU 33          // Tri·ªáu
#define AUDIO_NOTIFICATION 34   // Th√¥ng b√°o ƒë√£ nh·∫≠n ti·ªÅn (n·∫øu c√≥)

// Bi·∫øn ƒë·ªÉ l∆∞u th·ªùi gian ph√°t √¢m ∆∞·ªõc t√≠nh cho file hi·ªán t·∫°i
unsigned long currentAudioDuration = 0;

// üî¢ ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn
String formatNumber(long number) {
  String numStr = String(number);
  String formatted = "";
  int len = numStr.length();

  for (int i = 0; i < len; i++) {
    formatted += numStr[i];
    if ((len - i - 1) % 3 == 0 && i < len - 1) {
      formatted += ".";
    }
  }
  return formatted;
}

// üì∫ Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n tr√™n LCD
void displayAccountInfo() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(accountName);
  lcd.setCursor(0, 1);
  lcd.print(bankName);
}

// üì∫ Hi·ªÉn th·ªã s·ªë ti·ªÅn tr√™n LCD
void displayAmount(long amount) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Ban da nhan duoc:");
  
  // Format with thousand separators
  String formattedAmount = formatNumber(amount);
  
  lcd.setCursor(0, 1);
  lcd.print(formattedAmount + " d");
}

// Play audio with appropriate delay
void playAudio(int fileNumber) {
  if (fileNumber <= 0) return;
  
  dfPlayer.play(fileNumber);
  
  // Dynamic delay based on file type
  if (fileNumber == AUDIO_GREETING) {
    currentAudioDuration = 3000;   // Kho·∫£ng 3 gi√¢y
  } else if (fileNumber == AUDIO_DONG) {
    currentAudioDuration = 800;    // Kho·∫£ng 0.8 gi√¢y
  } else if (fileNumber >= 4 && fileNumber <= 12) {  // C√°c s·ªë t·ª´ 1-9
    currentAudioDuration = 600;    // Kho·∫£ng 0.6 gi√¢y  
  } else if (fileNumber == AUDIO_MUOI) {
    currentAudioDuration = 600;
  } else if (fileNumber >= 21 && fileNumber <= 29) { // "Hai m∆∞∆°i" ƒë·∫øn "Ch√≠n m∆∞∆°i"
    currentAudioDuration = 700;
  } else if (fileNumber == AUDIO_TRIEU) {
    currentAudioDuration = 600;
  } else if (fileNumber == AUDIO_TRAM) {
    currentAudioDuration = 500;
  } else if (fileNumber == AUDIO_NGHIN) {
    currentAudioDuration = 600;
  } else {
    currentAudioDuration = 700;    // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
  }
  
  delay(currentAudioDuration);
}

// Main function to announce amount
void announceAmount(long amount) {
  displayAmount(amount);
  isSpeaking = true;
  
  // Th√¥ng b√°o b·∫Øt ƒë·∫ßu
  playAudio(AUDIO_GREETING);
  delay(DELAY_AFTER_GREETING);
  
  bool hasSpokenAny = false; // ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc ph·∫ßn n√†o ch∆∞a
  
  if (amount >= 1000000) {  // H√†ng tri·ªáu
    int millions = amount / 1000000;
    playAudio(millions + AUDIO_NUMBER_OFFSET);
    delay(DELAY_AFTER_NUMBER);
    
    playAudio(AUDIO_TRIEU);
    delay(DELAY_AFTER_MILLION);
    
    amount %= 1000000;
    hasSpokenAny = true;
    
    // N·∫øu c√≤n s·ªë ph√≠a sau, delay th√™m
    if (amount > 0) {
      delay(DELAY_BETWEEN_GROUPS);
    }
  }
  
  if (amount >= 100000) {  // H√†ng trƒÉm ngh√¨n
    int hundredThousands = amount / 100000;
    playAudio(hundredThousands + AUDIO_NUMBER_OFFSET);
    delay(DELAY_AFTER_NUMBER);
    
    playAudio(AUDIO_TRAM);
    delay(DELAY_AFTER_HUNDRED);
    
    amount %= 100000;
    
    if (amount == 0 && hasSpokenAny) {
      // N·∫øu s·ªë c√≤n l·∫°i l√† 0 v√† ƒë√£ ƒë·ªçc ph·∫ßn tri·ªáu, th√™m "ngh√¨n"
      playAudio(AUDIO_NGHIN);
      delay(DELAY_AFTER_THOUSAND);
    }
    
    hasSpokenAny = true;
  }
  
  if (amount >= 10000 && amount < 100000) {  // H√†ng ch·ª•c ngh√¨n (kh√¥ng ƒë·ªçc l·∫°i n·∫øu ƒë√£ ƒë·ªçc h√†ng trƒÉm ngh√¨n)
    int tenThousands = amount / 10000;
    
    if (tenThousands >= 2) {
      // "Hai m∆∞∆°i", "Ba m∆∞∆°i",...
      playAudio(AUDIO_MUOI_OFFSET + tenThousands);
      delay(DELAY_AFTER_TEN);
    } else {
      playAudio(AUDIO_MUOI);
      delay(DELAY_AFTER_TEN);
    }
    
    amount %= 10000;
    
    if (amount >= 1000) {
      int thousands = amount / 1000;
      if (tenThousands >= 1 && thousands > 0) {
        playAudio(thousands + AUDIO_NUMBER_OFFSET);
        delay(DELAY_AFTER_NUMBER);
      }
      amount %= 1000;
    }
    
    playAudio(AUDIO_NGHIN);
    delay(DELAY_AFTER_THOUSAND);
    
    hasSpokenAny = true;
  }
  else if (amount >= 1000) {  // H√†ng ngh√¨n (< 10.000)
    int thousands = amount / 1000;
    playAudio(thousands + AUDIO_NUMBER_OFFSET);
    delay(DELAY_AFTER_NUMBER);
    
    playAudio(AUDIO_NGHIN);
    delay(DELAY_AFTER_THOUSAND);
    
    amount %= 1000;
    
    hasSpokenAny = true;
  }
  
  if (amount >= 100) {  // H√†ng trƒÉm
    int hundreds = amount / 100;
    playAudio(hundreds + AUDIO_NUMBER_OFFSET);
    delay(DELAY_AFTER_NUMBER);
    
    playAudio(AUDIO_TRAM);
    delay(DELAY_AFTER_HUNDRED);
    
    amount %= 100;
    
    hasSpokenAny = true;
  }
  
  if (amount > 0) {
    if (amount >= 20) {
      int tens = amount / 10;
      playAudio(AUDIO_MUOI_OFFSET + tens);
      delay(DELAY_AFTER_TEN);
      
      int ones = amount % 10;
      if (ones > 0) {
        playAudio(ones + AUDIO_NUMBER_OFFSET);
        delay(DELAY_AFTER_NUMBER);
      }
    } else if (amount >= 10) {
      playAudio(AUDIO_MUOI);
      delay(DELAY_AFTER_TEN);
      
      int ones = amount % 10;
      if (ones > 0) {
        playAudio(ones + AUDIO_NUMBER_OFFSET);
        delay(DELAY_AFTER_NUMBER);
      }
    } else {
      playAudio(amount + AUDIO_NUMBER_OFFSET);
      delay(DELAY_AFTER_NUMBER);
    }
    hasSpokenAny = true;
  }
  
  if (hasSpokenAny) {
    delay(DELAY_BEFORE_CURRENCY);
  }
  
  playAudio(AUDIO_DONG);
  delay(DELAY_AFTER_CURRENCY);
  
  isSpeaking = false;
}

// üîó L·∫•y d·ªØ li·ªáu t·ª´ API sePay
void getTransactionData() {
  if (WiFi.status() == WL_CONNECTED) {
    std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);
    client->setInsecure();

    HTTPClient http;
    String apiUrl = "https://my.sepay.vn/userapi/transactions/list?account_number=" + accountNumber + "&limit=5";

    Serial.println("üîó ƒêang g·ª≠i y√™u c·∫ßu HTTPS...");
    http.begin(*client, apiUrl);
    http.addHeader("Content-Type", "application/json");
    http.addHeader("Authorization", "Bearer " + String(api_token));

    int httpCode = http.GET();
    Serial.println("üì° HTTP CODE: " + String(httpCode));

    if (httpCode > 0) {
      String payload = http.getString();
      Serial.println("üì• JSON nh·∫≠n ƒë∆∞·ª£c:");
      Serial.println(payload);

      // üéØ Gi·∫£i m√£ JSON
      StaticJsonDocument<2048> doc;
      DeserializationError error = deserializeJson(doc, payload);
      if (error) {
        Serial.print("‚ùå L·ªói JSON: ");
        Serial.println(error.f_str());
        return;
      }

      JsonArray transactions = doc["transactions"].as<JsonArray>();
      if (transactions.size() > 0) {
        JsonObject transaction = transactions[0];

        String newTransactionDate = transaction["transaction_date"].as<String>();
        long newAmountIn = transaction["amount_in"].as<String>().toFloat();

        Serial.print("üí∞ S·ªë ti·ªÅn nh·∫≠n ƒë∆∞·ª£c: ");
        Serial.println(newAmountIn);

        // N·∫øu c√≥ giao d·ªãch m·ªõi v√† s·ªë ti·ªÅn > 0
        if (newTransactionDate != transactionDate && newAmountIn > 0) {
          Serial.println("üí° Ph√°t hi·ªán giao d·ªãch m·ªõi!");
          displayAmount(newAmountIn);
          
          // L∆∞u th√¥ng tin giao d·ªãch m·ªõi
          amountIn = newAmountIn;
          transactionDate = newTransactionDate;
          
          // Ch·ªâ ph√°t √¢m thanh n·∫øu kh√¥ng ph·∫£i l·∫ßn ƒë·∫ßu ti√™n kh·ªüi ƒë·ªông
          if (!isSpeaking) {
            announceAmount(newAmountIn);
          }
        }
      }
    } else {
      Serial.println("‚ùå L·ªói khi g·ª≠i y√™u c·∫ßu HTTPS");
    }
    http.end();
  }
}

// üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng
void setup() {
  Serial.begin(115200);
  delay(1000);

  // üåê K·∫øt n·ªëi WiFi
  WiFi.begin(ssid, password);
  Serial.println("üîÑ ƒêang k·∫øt n·ªëi WiFi...");
  
  // Kh·ªüi t·∫°o Wire cho I2C v·ªõi ch√¢n t√πy ch·ªânh
  Wire.begin(LCD_SDA, LCD_SCL);
  
  // Hi·ªÉn th·ªã th√¥ng b√°o kh·ªüi ƒë·ªông
  lcd.init();
  lcd.backlight();
  lcd.print("Dang khoi dong...");
  
  // K·∫øt n·ªëi WiFi
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi WiFi");
  
  // üîä Kh·ªüi t·∫°o DFPlayer
  dfPlayerSerial.begin(115200);
  delay(1000);
  
  if (!dfPlayer.begin(dfPlayerSerial)) {
    Serial.println("‚ùå L·ªói DFPlayer!");
    lcd.clear();
    lcd.print("Loi DFPlayer!");
    while (true);
  }
  
  dfPlayer.volume(VOLUME);
  
  // Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n
  displayAccountInfo();
  delay(2000);
  
  lcd.clear();
  lcd.print("San sang!");
  delay(1000);
  
  // ƒê·∫∑t th·ªùi gian ki·ªÉm tra d·ªØ li·ªáu
  timeGetData = millis();
}

// üîÑ Ch·∫°y v√≤ng l·∫∑p ch√≠nh
void loop() {
  // Ki·ªÉm tra nh·∫≠p li·ªáu t·ª´ Serial (ƒë·ªÉ test)
  if (Serial.available()) {
    String input = Serial.readStringUntil('\n');
    long amount = input.toInt();
    
    if (amount > 0) {
      Serial.println("üì¢ ƒêang th√¥ng b√°o: " + String(amount));
      announceAmount(amount);
    } else {
      Serial.println("‚ùå L·ªói: S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
      lcd.clear();
      lcd.print("Loi: So tien");
      lcd.setCursor(0, 1);
      lcd.print("khong hop le!");
      delay(2000);
      lcd.clear();
    }
  }
  
  // Ki·ªÉm tra giao d·ªãch m·ªõi m·ªói 6 gi√¢y n·∫øu kh√¥ng ƒëang ph√°t √¢m thanh
  if (!isSpeaking && millis() - timeGetData > 3000) {
    getTransactionData();
    timeGetData = millis();
  }
  
  // Ki·ªÉm tra tr·∫°ng th√°i ph√°t √¢m thanh
  if (!dfPlayer.isPlaying() && isSpeaking) {
    isSpeaking = false;
  }
}
